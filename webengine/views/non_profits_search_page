<style>
  .title {
    margin: 0;
    font-size: 24px;
    font-weight: bold;
  }
  .subtitle {
    margin: 0;
    font-size: 14px;
    color: #666;
  }
  .search-bar {
    display: flex;
    gap: 10px;
    max-width: 480px;
    width: 100%;
  }
  .search-input,
  .filter-dropdown {
    /* background-color: #f0f0f0; */
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    padding: 8px 12px;
    font-size: 14px;
  }
  .search-input {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="%23999" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"/><line x1="21" y1="21" x2="16.65" y2="16.65"/></svg>');
    background-repeat: no-repeat;
    background-position: 10px center;
    padding-left: 35px;
    max-width: 640px;
    height: 48px;
  }
  .filter-dropdown {
    appearance: none;
    padding-right: 30px;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="%23999" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"/></svg>');
    background-repeat: no-repeat;
    background-position: right 10px center;
  }
  .filter-dropdown::-ms-expand {
    display: none;
  }

  .section-title p,
  .section-title {
    font-size: 2rem;
    font-weight: 500;
    text-align: center;
  }
  .hero-description p,
  .hero-description {
    font-size: 1.125rem;
    font-weight: 400;
    text-align: center;
    color: var(--bs-gray-500);
    max-width: 53.125rem;
  }

  #cause-filter {
    width: 120px;
  }

  /* Styles for Webkit browsers (Chrome, Safari, etc.) */
  #cause-filter::-webkit-scrollbar {
    width: 8px;
  }

  #cause-filter::-webkit-scrollbar-track {
    background: #f1f1f1;
  }

  #cause-filter::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
  }

  #cause-filter::-webkit-scrollbar-thumb:hover {
    background: #555;
  }

  /* Styles for Firefox */
  #cause-filter {
    scrollbar-width: thin;
    scrollbar-color: #888 #f1f1f1;
  }

  /* Ensure the dropdown is scrollable */
  #cause-filter option {
    max-height: 300px;
    overflow-y: auto;
  }

  .search-controls {
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-width: 480px;
    width: 100%;
  }
  
  .search-options {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-top: 5px;
  }
  
  .form-check-label {
    font-size: 14px;
    color: #666;
    cursor: pointer;
  }
  
  .npo-location {
    font-size: 13px;
    color: #666;
    margin-top: 5px;
    display: flex;
    align-items: center;
    gap: 5px;
  }
  
  .location-icon {
    font-size: 12px;
    color: #999;
  }
  
  /* Custom checkbox styling */
  .form-check-input {
    cursor: pointer;
  }
  
  .form-check-input:checked {
    background-color: var(--bs-primary);
    border-color: var(--bs-primary);
  }
</style>

<style>
  .npo-image {
    height: 100%;
    max-height: 100px;
    object-fit: cover;
    border-radius: 10px;
  }
  .npo-title {
    font-size: 16px;
    font-weight: 500;
    color: #0e121b;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .npo-subtitle p,
  .npo-subtitle {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    line-clamp: 2;
    overflow: hidden;
    text-overflow: ellipsis;
    max-height: 2.8em; /* Adjust this value based on your line-height */
    line-height: 1.4em; /* Adjust this value as needed */
  }
  .npo-subtitle,
  .npo-name {
    font-size: 14px;
    font-weight: 400;
    color: #0e121b;
  }
  .npo-cause {
    padding: 0 10px;
    /* height: 28px; */
    border-radius: 14px;
    background-color: #eceff3;
    text-transform: uppercase;
    font-size: 12px;
    /* font-weight: bold; */
  }
  .npo-date {
    font-size: 12px;
  }
  .npo-npo-logo { 
    width: 24px;
    height: 24px;
    border: 1px solid #aeaeae;
    border-radius: 3px;
    object-fit: contain;
    object-position: center;
    background-color: white;
  }
  .npo-btn {
    font-size: 12px;
    font-weight: 500;
    color: #0e121b;
  }
  .npo-card {
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  }
  .npo-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }
  .npo-btn {
    transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
  }
  .npo-card:hover .npo-btn {
    background-color: #7b3fee;
    color: white;
  }
  .card-btn {
    height: 36px;
  }
</style>

<section class="container py-4 py-md-8">
  <div
    class="d-flex flex-column gap-2 justify-content-center align-items-center"
  >
    <p class="fs-1 fw-normal text-center">{{ this.hero_title }}</p>
    <p class="fs-5 text-muted text-center" style="max-width: 45rem">
      {{ this.hero_description }}
    </p>
    <div class="search-controls">
      <input
        type="text"
        id="npo-search"
        class="search-input form-control w-100 mb-2 mb-md-0 py-2 my-4 w-100"
        placeholder="Search Nonprofits..."
        aria-label="Search"
      />
      <div class="search-options d-none">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" id="location-filter-toggle">
          <label class="form-check-label" for="location-filter-toggle">
            Filter by location
          </label>
        </div>
      </div>
    </div>
    <!-- Re-add the cause filter but keep it hidden -->
    <div class="d-none">
      <select id="cause-filter" class="filter-dropdown form-control">
        <option value="all">All Causes</option>
      </select>
    </div>
  </div>
</section>

<section class="py-2">
  <hr class="my-0" style="border-top: 1px solid #bdbdbd" />
</section>

<section id="search-results" class="container py-4">
  <div class="row">
    <aside class="col-12 col-lg-3 mb-4" id="filters-sidebar">
      <div class="card p-3">
        <div class="d-flex align-items-center gap-2 mb-2">
          <i class="bi bi-funnel"></i>
          <span class="fw-semibold">Filters</span>
        </div>

        <div class="mb-3">
          <div class="fw-semibold mb-2">Causes</div>
          <div id="cause-checkboxes" class="d-flex flex-column gap-2" style="max-height: 240px; overflow: auto;"></div>
        </div>

        <div class="mb-2">
          <div class="fw-semibold mb-2">Location</div>
          <select id="country-select" class="form-select mb-3">
            <option value="">Select Country</option>
          </select>
          <select id="state-select" class="form-select mb-3">
            <option value="">Select State</option>
          </select>
          <select id="city-select" class="form-select mb-3">
            <option value="">Select City</option>
          </select>
          <select id="zip-select" class="form-select mb-4">
            <option value="">Select ZIP Code</option>
          </select>
        </div>
        <button id="reset-filters" class="btn btn-secondary w-100">Reset Filters</button>
      </div>
    </aside>

    <div class="col-12 col-lg-9">
      <div class="d-flex justify-content-between align-items-center">
        <p class="fs-5 fw-bold py-4 mb-0">Explore Nonprofits</p>
        <span id="results-count" class="text-muted small">0 results found</span>
      </div>
      <div id="search-npos-container" class="row row-gap-4">
        <!-- Search results will be dynamically inserted here -->
      </div>
    </div>
  </div>
</section>

<section class="py-2 d-none">
  <hr class="my-0" style="border-top: 1px solid #bdbdbd" />
</section>

<!--Get started section-->
<section id="get-started-section" class="container-fluid pt-5">
  <div class="container">
    <div
      class="d-flex flex-column gap-3 align-items-center justify-content-center"
    >
      <p class="section-title text-center d-none">Couldn't find your nonprofit? Need a hand? Let's connect.</p>
      <div class="hero-description mx-auto d-none">
        We're here to help you get listed, access features, and onboard your team of volunteers and staff.
      </div>
      <div class="py-3 d-none">
        <a href="{{ demo_page.first().path_full }}" class="btn btn-primary">
          Contact Us
        </a>
      </div>
      <img
        src="https://4xxglxlj.media.zestyio.com/layer-2-1.png"
        alt=""
        style="height: 12.375rem; object-fit: contain"
      />
    </div>
  </div>
</section>

<script type="module">
  $(document).ready(function () {
    const $npoSearch = $(".search-input");
    const $causeFilter = $("#cause-filter");
    const $searchNposContainer = $("#search-npos-container");
    const $locationFilterToggle = $("#location-filter-toggle");
    const $causeCheckboxes = $("#cause-checkboxes");
    const $countrySelect = $("#country-select");
    const $stateSelect = $("#state-select");
    const $citySelect = $("#city-select");
    const $zipSelect = $("#zip-select");
    const $resetFilters = $("#reset-filters");
    const $loadingIndicator = $(
      '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>'
    );
    const $noResultsMessage = $(`
      <div class="text-center py-6">
        <h2 class="mb-3">Couldn't find your nonprofit? Need a hand? Let's connect.</h2>
        <p class="hero-description mx-auto mb-4">We're here to help you get listed, access features, and onboard your team of volunteers and staff.</p>
        <div class="d-flex justify-content-center gap-2">
          <a href="{{ $base_url }}claim-listing/" class="btn btn-primary">Register My Nonprofit</a>
          <a href="{{ $base_url }}demo/" class="btn btn-secondary">Suggest a Nonprofit</a>
        </div>
      </div>
    `);
    const $exploreNPOsText = $(".fs-5.fw-bold.py-4");
    const $resultsCount = $("#results-count");
    let currentPage = 1;
    let isSearching = false;
    let npoData = [];
    let unfilteredNpoData = []; // Store unfiltered data for cause checkbox updates
    let hasLoadMoreBeenClicked = false;
    let isLocationSearch = false;
    let selectedCauses = new Set();

    // Show skeleton placeholders for causes while loading
    function showCausesLoading() {
      const placeholders = Array.from({ length: 6 })
        .map(() => `
          <div class="d-flex align-items-center gap-2 mb-2 placeholder-glow">
            <span class="placeholder rounded" style="width:16px;height:16px;"></span>
            <span class="placeholder col-8"></span>
          </div>
        `)
        .join("");
      $causeCheckboxes.html(placeholders);
    }

    showCausesLoading();

    // Update placeholder text based on search mode
    function updatePlaceholder() {
      $npoSearch.attr("placeholder", "Search nonprofits by name, country, state, city, zip, or cause...");
    }

    // Toggle between name and location search
    $locationFilterToggle.on("change", function() {
      isLocationSearch = $(this).is(":checked");
      updatePlaceholder();
      
      // Reset search if there's text in the input
      if ($npoSearch.val()) {
        currentPage = 1;
        hasLoadMoreBeenClicked = false;
        searchNpos();
        updateUrlParam();
      }
    });

    // Update cause checkboxes based on displayed NPOs
    function updateCauseCheckboxes(npos) {
      const causesSet = new Set();
      
      npos.forEach(npo => {
        if (npo.category?.data) {
          npo.category.data.forEach(cat => {
            if (cat.title) causesSet.add(cat.title);
          });
        }
      });

      if (causesSet.size === 0) {
        $causeCheckboxes.html('<div class="text-muted small">No causes found</div>');
        return;
      }

      // Preserve currently selected causes
      const currentlySelected = new Set();
      $(".cause-check").each(function() {
        if ($(this).is(":checked")) {
          currentlySelected.add($(this).val());
        }
      });

      $causeCheckboxes.empty();
      const sortedCauses = Array.from(causesSet).sort((a, b) => a.localeCompare(b));
      
      sortedCauses.forEach((title) => {
        const id = `cause-${title.replace(/[^a-z0-9]+/gi, '-').toLowerCase()}`;
        const isChecked = currentlySelected.has(title) ? 'checked' : '';
        const checkbox = `
          <div class="form-check">
            <input class="form-check-input cause-check" type="checkbox" value="${title}" id="${id}" ${isChecked} />
            <label class="form-check-label" for="${id}">${title}</label>
          </div>`;
        $causeCheckboxes.append(checkbox);
      });

      // Update selectedCauses set to reflect preserved selections
      selectedCauses.clear();
      currentlySelected.forEach(cause => {
        if (causesSet.has(cause)) {
          selectedCauses.add(cause);
        }
      });
    }

    // Get the filter parameter from the URL
    const urlParams = new URLSearchParams(window.location.search);
    const searchParam = urlParams.get("filter");
    const locationParam = urlParams.get("location");

    // Set up initial search state based on URL parameters
    if (locationParam) {
      $locationFilterToggle.prop("checked", true);
      isLocationSearch = true;
      $npoSearch.val(locationParam);
    } else if (searchParam) {
      $locationFilterToggle.prop("checked", false);
      isLocationSearch = false;
      $npoSearch.val(searchParam);
    }
    
    updatePlaceholder();

    // Perform initial search
    searchNpos();

    function debounce(func, wait) {
      let timeout;
      return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }

    $npoSearch.on(
      "input",
      debounce(() => {
        currentPage = 1;
        hasLoadMoreBeenClicked = false;
        searchNpos();
        updateUrlParam();
      }, 300)
    );

    // Cause checkbox change
    $(document).on("change", ".cause-check", function() {
      const value = $(this).val();
      if ($(this).is(":checked")) {
        selectedCauses.add(value);
      } else {
        selectedCauses.delete(value);
      }
      currentPage = 1;
      filterNpos();
    });

    // Populate simple Country/State/City from available data dynamically after fetch
    function populateLocationsFromData(allNpos) {
      const countries = new Set();
      const states = new Set();
      const cities = new Set();
      const zips = new Set();

      allNpos.forEach(npo => {
        const addr = (npo.headquarters_address || "").split(",").map(s=>s.trim());
        if (addr.length) {
          const maybeCity = addr[1] || addr[0];
          const maybeState = addr[2] || "";
          const maybeZip = addr[3] || "";
          const maybeCountry = addr[4] || addr[addr.length-1] || "";
          if (maybeCountry) countries.add(maybeCountry);
          if (maybeState) states.add(maybeState);
          if (maybeCity) cities.add(maybeCity);
          if (maybeZip) zips.add(maybeZip);
        }
      });

      function setOptions($select, values, placeholder) {
        const current = $select.val();
        $select.empty().append(`<option value="">${placeholder}</option>`);
        Array.from(values).sort((a,b)=>a.localeCompare(b)).forEach(v=>{
          $select.append(`<option value="${v}">${v}</option>`);
        });
        if (current && values.has(current)) $select.val(current);
      }

      setOptions($countrySelect, countries, "Select Country");
      setOptions($stateSelect, states, "Select State");
      setOptions($citySelect, cities, "Select City");
      setOptions($zipSelect, zips, "Select ZIP Code");
    }

    $countrySelect.on("change", filterNpos);
    $stateSelect.on("change", filterNpos);
    $citySelect.on("change", filterNpos);
    $zipSelect.on("change", filterNpos);

    // Reset filters handler
    $resetFilters.on("click", function() {
      // Clear causes
      selectedCauses.clear();
      $(".cause-check").prop("checked", false);
      // Reset location selects
      $countrySelect.val("");
      $stateSelect.val("");
      $citySelect.val("");
      $zipSelect.val("");
      // Reset search input mode filters (keep search text as-is)
      // Display unfiltered data
      displayResults(unfilteredNpoData);
    });

    // Update URL parameter function
    function updateUrlParam() {
      const searchValue = $npoSearch.val();
      let newUrl = window.location.pathname;
      if (searchValue) {
        newUrl += `?filter=${encodeURIComponent(searchValue)}`;
      }
      history.pushState(null, "", newUrl);
    }

    function searchNpos() {
      const searchInput = $npoSearch.val();
      const limit = !searchInput && !hasLoadMoreBeenClicked ? 8 : 20;
      const isFeatured = !searchInput && !hasLoadMoreBeenClicked ? 1 : 0;

      if (currentPage === 1) {
        $searchNposContainer.empty().append($loadingIndicator);
      }

      const baseParams = { limit: limit, page: currentPage };
      if (!searchInput) baseParams.featured = isFeatured;

      // If there's no search input, do a single request (featured or general)
      if (!searchInput) {
        $.ajax({
          url: `{{ $base_url }}mobileapp/npos.json?zpw=causecircle`,
          method: "GET",
          data: baseParams,
          success: function (data) {
            if (currentPage === 1) {
              $searchNposContainer.empty();
              npoData = [];
              unfilteredNpoData = [];
            }
            if (data.data && data.data.length > 0) {
              const existingZuids = new Set(npoData.map(n => n.meta?.zuid));
              const newNpos = data.data.filter(n => !existingZuids.has(n.meta?.zuid));
              npoData = [...npoData, ...newNpos];
              unfilteredNpoData = [...npoData]; // Store unfiltered data
              displayResults(npoData);
              if (currentPage === 1) {
                populateLocationsFromData(npoData);
                updateCauseCheckboxes(npoData);
              }
              if ((data.data.length >= limit) || !hasLoadMoreBeenClicked) {
                addLoadMoreButton();
              } else {
                removeLoadMoreButton();
              }
            } else if (currentPage === 1) {
              $exploreNPOsText.hide();
              removeLoadMoreButton();
              $searchNposContainer.append($noResultsMessage);
              updateCauseCheckboxes([]);
            }
            isSearching = false;
          },
          error: function (error) {
            console.error("Error fetching search results:", error);
            if (currentPage === 1) {
              $exploreNPOsText.hide();
              removeLoadMoreButton();
              $searchNposContainer.empty().append($(
                '<div class="text-center py-4">An error occurred. Please try again.</div>'
              ));
            }
            isSearching = false;
          }
        });
        return;
      }

      // With search input, perform three parallel requests: name, address, and causes
      const nameSearchParams = { ...baseParams, search: searchInput, headquarters_address: "" };
      const addrSearchParams = { ...baseParams, headquarters_address: searchInput, search: "" };
      const causesSearchParams = { filter: searchInput, limit: 25 };

      const nameReq = $.ajax({
        url: `{{ $base_url }}mobileapp/npos.json?zpw=causecircle`,
        method: "GET",
        data: nameSearchParams
      });
      const addrReq = $.ajax({
        url: `{{ $base_url }}mobileapp/npos.json?zpw=causecircle`,
        method: "GET",
        data: addrSearchParams
      });
      const causesReq = $.ajax({
        url: `{{ $base_url }}mobileapp/causes.json?zpw=causecircle`,
        method: "GET",
        data: causesSearchParams
      });

      $.when(nameReq, addrReq, causesReq).done(function(nameRes, addrRes, causesRes) {
        const nameData = nameRes && nameRes[0] ? nameRes[0] : { data: [] };
        const addrData = addrRes && addrRes[0] ? addrRes[0] : { data: [] };
        const causesData = causesRes && causesRes[0] ? causesRes[0] : { data: [] };

        // Extract cause zuids (support meta.zuid or zuid)
        const causeZuids = Array.isArray(causesData.data)
          ? causesData.data.map(c => (c.meta?.zuid || c.zuid)).filter(Boolean)
          : [];

        // Limit number of parallel cause requests to avoid overload
        const MAX_CAUSE_REQUESTS = 8;
        const limitedCauseZuids = causeZuids.slice(0, MAX_CAUSE_REQUESTS);

        // Prepare NPO requests for each cause zuid
        const causeNpoReqs = limitedCauseZuids.map(zuid => $.ajax({
          url: `{{ $base_url }}mobileapp/npos.json?zpw=causecircle`,
          method: "GET",
          data: { ...baseParams, cause_zuid: zuid, search: "", headquarters_address: "" }
        }));

        const afterCauseRequests = function(allCauseResponses) {
          if (currentPage === 1) {
            $searchNposContainer.empty();
            npoData = [];
            unfilteredNpoData = [];
          }

          const combined = [];
          if (Array.isArray(nameData.data)) combined.push(...nameData.data);
          if (Array.isArray(addrData.data)) combined.push(...addrData.data);

          // Merge NPOs from causes responses
          if (Array.isArray(allCauseResponses)) {
            allCauseResponses.forEach(res => {
              const payload = Array.isArray(res) ? res[0] : res; // jQuery when returns [data, status, jqXHR]
              if (payload && Array.isArray(payload.data)) combined.push(...payload.data);
            });
          }

          if (combined.length > 0) {
            const existingZuids = new Set(npoData.map(n => n.meta?.zuid));
            const dedupedNew = [];
            for (const n of combined) {
              const zuid = n.meta?.zuid;
              if (!existingZuids.has(zuid)) {
                existingZuids.add(zuid);
                dedupedNew.push(n);
              }
            }
            npoData = [...npoData, ...dedupedNew];
            unfilteredNpoData = [...npoData]; // Store unfiltered data

            displayResults(npoData);
            if (currentPage === 1) {
              populateLocationsFromData(npoData);
              updateCauseCheckboxes(npoData);
            }

            const hasMoreName = Array.isArray(nameData.data) && nameData.data.length >= limit;
            const hasMoreAddr = Array.isArray(addrData.data) && addrData.data.length >= limit;
            let hasMoreCause = false;
            if (Array.isArray(allCauseResponses)) {
              hasMoreCause = allCauseResponses.some(r => {
                const payload = Array.isArray(r) ? r[0] : r;
                return payload && Array.isArray(payload.data) && payload.data.length >= limit;
              });
            }
            if ((hasMoreName || hasMoreAddr || hasMoreCause) || !hasLoadMoreBeenClicked) {
              addLoadMoreButton();
            } else {
              removeLoadMoreButton();
            }
          } else if (currentPage === 1) {
            $exploreNPOsText.hide();
            removeLoadMoreButton();
            $searchNposContainer.append($noResultsMessage);
            updateCauseCheckboxes([]);
          }
          isSearching = false;
        };

        if (causeNpoReqs.length > 0) {
          $.when.apply($, causeNpoReqs).done(function() {
            const responses = Array.prototype.slice.call(arguments);
            afterCauseRequests(responses);
          }).fail(function(error) {
            console.error("Error fetching NPOs by causes:", error);
            afterCauseRequests([]);
          });
        } else {
          afterCauseRequests([]);
        }
      }).fail(function(error) {
        console.error("Error fetching combined search results:", error);
        if (currentPage === 1) {
          $exploreNPOsText.hide();
          removeLoadMoreButton();
          $searchNposContainer.empty().append($(
            '<div class="text-center py-4">An error occurred. Please try again.</div>'
          ));
        }
        isSearching = false;
      });
    }

    function filterNpos() {
      const selectedCountry = $countrySelect.val();
      const selectedState = $stateSelect.val();
      const selectedCity = $citySelect.val();
      const selectedZip = $zipSelect.val();

      const hasCauseFilter = selectedCauses.size > 0;
      const hasLocationFilter = selectedCountry || selectedState || selectedCity || selectedZip;

      if (!hasCauseFilter && !hasLocationFilter) {
        displayResults(unfilteredNpoData);
        return;
      }

      // Filter from unfiltered data, not from already filtered npoData
      const filteredNpos = unfilteredNpoData.filter((npo) => {
        let causeMatch = true;
        let locationMatch = true;

        if (hasCauseFilter) {
          const titles = (npo.category?.data || []).map(c => c.title);
          causeMatch = Array.from(selectedCauses).every(c => titles.includes(c));
        }

        if (hasLocationFilter) {
          const address = (npo.headquarters_address || "").toLowerCase();
          if (selectedCountry && !address.includes(selectedCountry.toLowerCase())) locationMatch = false;
          if (selectedState && !address.includes(selectedState.toLowerCase())) locationMatch = false;
          if (selectedCity && !address.includes(selectedCity.toLowerCase())) locationMatch = false;
          if (selectedZip && !address.includes(selectedZip.toLowerCase())) locationMatch = false;
        }

        return causeMatch && locationMatch;
      });

      displayResults(filteredNpos);
    }
    
    function displayResults(npos) {
      $searchNposContainer.empty();
      
      $resultsCount.text(`${npos?.length || 0} results found`);
      if (npos && npos.length > 0) {
        $exploreNPOsText.show();
        
        npos.forEach((npo) => {
          const $npoCard = createNpoCard(npo);
          $searchNposContainer.append($npoCard);
        });
      } else {
        $exploreNPOsText.hide();
        removeLoadMoreButton();
        $searchNposContainer.append($noResultsMessage);
      }
    }

    function createNpoCard(npo) {
      let npoImage =
        typeof npo.hero_image === "string"
          ? npo.hero_image
          : npo.hero_image?.data?.[0]?.url || "";

      if (!npoImage || npoImage.includes("https://placehold.co/")) {
        npoImage = "{{globals.npo_placeholder_image.getImage()}}";
      }
      
      // Get the headquarters address or show "Location not available"
      const locationDisplay = npo.headquarters_address 
        ? `<div class="npo-location"><i class="bi bi-geo-alt location-icon"></i> ${npo.headquarters_address}</div>` 
        : '';

      return `
      <div class="col-12 col-sm-6 col-md-3">
        <a href="${
          npo.meta?.web?.uri || "#"
        }" class="text-decoration-none">
          <div class="card d-flex flex-column h-100 p-3 gap-2 npo-card" data-story-url="${
            npo.meta?.web?.uri || "#"
          }">
            <img src="${npoImage}?width=150" class="npo-image" alt="NPO cover image"/>
            <div class="d-flex flex-column gap-2 h-100">
              <div class="d-flex flex-grow-1 align-items-center gap-2 d-none">
                <img src="${
                  typeof npo.logo === "string"
                    ? npo.logo
                    : npo.logo?.data?.[0]?.url || ""
                }" class="npo-npo-logo" alt="NPO logo"/>
                <p class="npo-name my-auto">${npo.name || "Unknown NPO"}</p>
              </div>
              <p class="npo-title">${npo.name || "Unknown NPO"}</p>
              <div class="npo-subtitle">${
                npo.cause_description || "No description available"
              }</div>
              ${locationDisplay}
              <div class="btn btn-secondary npo-btn card-btn mt-auto">View Profile</div>
            </div>
          </div>
        </a>
      </div>
    `;
    }

    function addLoadMoreButton() {
      removeLoadMoreButton();
      const $loadMoreButton = $(
        '<button class="btn btn-primary mt-4 d-block mx-auto">Load More</button>'
      );
      $loadMoreButton.on("click", loadMore);
      $searchNposContainer.after($loadMoreButton);
    }

    function removeLoadMoreButton() {
      $searchNposContainer.next(".btn-primary").remove();
    }

    function loadMore() {
      hasLoadMoreBeenClicked = true;
      currentPage++;
      searchNpos();
    }
  });
</script>
