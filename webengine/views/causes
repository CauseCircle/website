<!--prettier-ignore-->
{{$causeImg = }}
{{if {this.image} }}
{{ $causeImg = {this.image.getImage()} }}
{{else}}
{{ $causeImg = "https://placehold.co/1200x400/png?text=Cause+Image" }}
{{/if}}

{{include /components/global/Modals/share_page_modal.html}}

<style>
  .hero-container {
    background-image: url("{{$causeImg}}");
    background-size: cover;
    background-position: center;
    height: 200px;
    border-radius: 0;
  }
  @media (min-width: 768px) {
    .hero-container {
      border-radius: 20px;
    }
  }
  .gradient-overlay {
    background: linear-gradient(
      179.63deg,
      rgba(113, 61, 221, 0) 0.32%,
      #3d2177 99.68%
    );
    border-radius: 20px;
  }
  .search-bar {
    display: flex;
    gap: 10px;
  }
  .search-input,
  .filter-dropdown {
    /* background-color: #f0f0f0; */
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    padding: 8px 12px;
    font-size: 14px;
  }
  .search-input {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="%23999" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"/><line x1="21" y1="21" x2="16.65" y2="16.65"/></svg>');
    background-repeat: no-repeat;
    background-position: 10px center;
    padding-left: 35px;
    max-width: 548px;
    height: 40px;
  }

  .section-title p,
  .section-title {
    font-size: 2rem;
    font-weight: 500;
    text-align: center;
  }
  .hero-description p,
  .hero-description {
    font-size: 1.125rem;
    font-weight: 400;
    text-align: center;
    color: var(--bs-gray-500);
    max-width: 53.125rem;
  }

  .hero-img {
    width: 100%;
    height: 100%;
    max-height: 250px;
    object-fit: cover;
    border-radius: 8px;
  }
  .btn-container {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    flex-wrap: wrap;
  }
  .card {
    border: 1px solid #e1e4ea;
    padding: 24px;
    border-radius: 16px;
    opacity: 1;
  }
</style>

<style>
  .npo-image {
    height: 100%;
    max-height: 100px;
    object-fit: cover;
    border-radius: 10px;
  }
  .npo-title {
    font-size: 16px;
    font-weight: 500;
    color: #0e121b;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .npo-subtitle p,
  .npo-subtitle {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    max-height: 2.8em; /* Adjust this value based on your line-height */
    line-height: 1.4em; /* Adjust this value as needed */
  }
  .npo-subtitle,
  .npo-name {
    font-size: 14px;
    font-weight: 400;
    color: #0e121b;
  }
  .npo-cause {
    padding: 0 10px;
    /* height: 28px; */
    border-radius: 14px;
    background-color: #eceff3;
    text-transform: uppercase;
    font-size: 12px;
    /* font-weight: bold; */
  }
  .npo-date {
    font-size: 12px;
  }
  .npo-npo-logo {
    width: 24px;
    height: 24px;
    border: 1px solid #aeaeae;
    border-radius: 3px;
    object-fit: contain; 
    object-position: center;
    background-color: white;
  }
  .npo-btn {
    font-size: 12px;
    font-weight: 500;
    color: #0e121b;
  }
  .npo-card {
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  }
  .npo-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }
  .npo-btn {
    transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
  }
  .npo-card:hover .npo-btn {
    background-color: #7b3fee;
    color: white;
  }
  .card-btn {
    height: 36px;
  }
  .cause-subtitle,
  .cause-subtitle * {
    width: 100%;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
  }
</style>

<section id="hero-section" class="my-4">
  <div class="container">
    <div class="card pb-0">
      <img class="hero-img mb-4" src="{{$causeImg}}" alt="{{ this.title }}" />
      <div class="row mb-4">
        <div class="col-12 col-md-8">
          <h3 class="card-title mb-0">{{ this.title }}</h3>
          <div class="card-text cause-subtitle text-muted">
            {{ this.short_description }}
          </div>
        </div>
        <div class="col-12 col-md-4 pt-4 pt-md-0">
          <div class="btn-container h-100 d-flex align-items-end">
            <button
              class="btn btn-secondary"
              data-bs-toggle="modal"
              data-bs-target="#shareModal"
            >
              <i class="bi bi-share"></i> Share Page
            </button>
            <button id="followButton" class="btn btn-outline-primary">
              <span class="button-content">
                <i class="bi bi-plus follow-icon"></i>
                <span class="follow-text">Follow</span>
              </span>
              <span class="loading-spinner d-none">
                <span
                  class="spinner-border spinner-border-sm"
                  role="status"
                  aria-hidden="true"
                ></span>
                <span class="loading-text ms-1">Loading...</span>
              </span>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<section id="search-section" class="my-4">
  <div class="container">
    <div id="search-results" class="mb-4 flex-column gap-4">
      <div class="d-flex justify-content-between align-items-center flex-wrap">
        <p class="fs-5 fw-bold mb-4">Explore Nonprofits for this Cause</p>
        <div class="d-flex align-items-center justify-content-end mb-4 flex-grow-1">
          <input
            type="text"
            id="cause-search"
            class="search-input form-control w-100"
            placeholder="Search Nonprofits by name..."
            aria-label="Search"
          />
        </div>
      </div>
      <div id="search-causes-container" class="row row-gap-4">
        <!-- Search results will be dynamically inserted here -->
      </div>
    </div>
  </div>
</section>

<section class="py-2">
  <hr class="my-0" style="border-top: 1px solid #bdbdbd" />
</section>

<!--Get started section-->
<section id="get-started-section" class="container-fluid pt-5">
  <div class="container">
    <div
      class="d-flex flex-column gap-3 align-items-center justify-content-center"
    >
      <p class="section-title text-center">Ready to Make a Difference?</p>
      <div class="hero-description mx-auto">
        Start exploring causes and nonprofits to today.
      </div>
      <div class="py-3">
        <a href="{{ demo_page.first().path_full }}" class="btn btn-primary">
          Get Started
        </a>
      </div>
      <img
        src="https://4xxglxlj.media.zestyio.com/layer-2-1.png"
        alt=""
        style="height: 12.375rem; object-fit: contain"
      />
    </div>
  </div>
</section>

<!-- Share Modal -->
<!--prettier-ignore-->
{{ include /components/global/Modals/share_page_modal.html }}

<script type="module">
  $(document).ready(function () {
    const $causeSearch = $("#cause-search");
    const $searchCausesContainer = $("#search-causes-container");
    const $loadingIndicator = $(
      '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>'
    );
    const $noResultsMessage = $(`
      <div class="text-center py-12">
        <h2 class="mb-3">Nonprofit Not Found</h2>
        <p class="text-muted">
          We couldn't find any Nonprofit matching your search criteria for this
          cause.
        </p>
      </div>
    `);
    const $exploreNPOsText = $(".fs-5.fw-bold.py-4");
    let currentPage = 1;
    let isSearching = false;

    const localUser = JSON.parse(localStorage.getItem("user"));
    
    // Hide follow button if user isn't logged in
    if (!localUser?.zuid) {
      $("#followButton").hide();
    }

    // Perform initial search
    searchNpos();

    function debounce(func, wait) {
      let timeout;
      return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }

    $causeSearch.on(
      "input",
      debounce(() => {
        currentPage = 1;
        searchNpos();
      }, 300)
    );

    function searchNpos() {
      const searchInput = $causeSearch.val();
      const limit = 20;

      if (currentPage === 1) {
        $searchCausesContainer.empty().append($loadingIndicator);
      }

      $.ajax({
        url: `{{ $base_url }}mobileapp/npos_by_cause.json`,
        method: "GET",
        data: {
          limit: limit,
          search: searchInput,
          page: currentPage,
          cause: "{{ this.zuid }}",
        },
        success: function (data) {
          if (currentPage === 1) {
            $searchCausesContainer.empty();
          }
          if (data.data && data.data.length > 0) {
            $exploreNPOsText.show();
            $.each(data.data, function (index, npo) {
              const $npoCard = createNpoCard(npo);
              $searchCausesContainer.append($npoCard);
            });
            if (data.data.length === limit) {
              addLoadMoreButton();
            } else {
              removeLoadMoreButton();
            }
          } else if (currentPage === 1) {
            // $exploreNPOsText.hide();
            removeLoadMoreButton();
            $searchCausesContainer.append($noResultsMessage);
          }
          isSearching = false;
        },
        error: function (error) {
          console.error("Error fetching search results:", error);
          if (currentPage === 1) {
            // $exploreNPOsText.hide();
            removeLoadMoreButton();
            $searchCausesContainer
              .empty()
              .append(
                $(
                  '<div class="text-center py-4">An error occurred. Please try again.</div>'
                )
              );
          }
          isSearching = false;
        },
      });
    }

    function createNpoCard(npo) {
      let npoImage =
        typeof npo.hero_image === "string"
          ? npo.hero_image
          : npo.hero_image?.data[0]?.url || "";

      if (npoImage.includes("https://placehold.co/")) {
        npoImage = "{{globals.npo_placeholder_image.getImage()}}";
      }

      return `
      <div class="col-12 col-sm-6 col-md-3">
        <div class="card d-flex flex-column h-100 p-3 gap-2 npo-card" data-story-url="${
          npo.meta?.web?.uri || "#"
        }">
          <img src="${npoImage}" class="npo-image" alt="NPO cover image"/>
          <div class="d-flex flex-column gap-2 h-100">
            <div class="d-flex flex-grow-1 align-items-center gap-2">
              <img src="${
                typeof npo.logo === "string"
                  ? npo.logo
                  : npo.logo?.data[0]?.url || ""
              }" class="npo-npo-logo" alt="NPO logo"/>
              <p class="npo-name my-auto">${npo.name || "Unknown NPO"}</p>
            </div>
            <p class="npo-title">${npo.name || "Unknown NPO"}</p>
            <div class="npo-subtitle">${
              npo.cause_description || "No description available"
            }</div>
            <a href="${
              npo.meta?.web?.uri || "#"
            }" class="btn btn-secondary npo-btn card-btn">View Profile</a>
          </div>
        </div>
      </div>
    `;
    }

    function addLoadMoreButton() {
      removeLoadMoreButton();
      const $loadMoreButton = $(
        '<button class="btn btn-secondary mt-4 d-block mx-auto">Load More</button>'
      );
      $loadMoreButton.on("click", loadMore);
      $searchCausesContainer.after($loadMoreButton);
    }

    function removeLoadMoreButton() {
      $searchCausesContainer.next(".btn-secondary").remove();
    }

    function loadMore() {
      if (!isSearching) {
        isSearching = true;
        currentPage++;
        searchNpos();
      }
    }

    $("img").each(function () {
      if ($(this).attr("src").includes("https://placehold.co/")) {
        $(this).attr("src", "{{globals.npo_placeholder_image.getImage()}}");
      }
    });

    const followBtn = $("#followButton");
    const followIcon = followBtn.find(".follow-icon");
    const followText = followBtn.find(".follow-text");
    const buttonContent = followBtn.find(".button-content");
    const loadingSpinner = followBtn.find(".loading-spinner");

    async function updateButtonState(isFollowing) {
      if (isFollowing) {
        followBtn.removeClass("btn-outline-primary").addClass("btn-primary");
        followIcon.removeClass("bi-plus").addClass("bi-check2");
        followText.text("Following");
      } else {
        followBtn.addClass("btn-outline-primary").removeClass("btn-primary");
        followIcon.addClass("bi-plus").removeClass("bi-check2");
        followText.text("Follow");
      }
    }

    async function showLoading(isLoading) {
      if (isLoading) {
        buttonContent.addClass("d-none");
        loadingSpinner.removeClass("d-none");
        followBtn.prop("disabled", true);
      } else {
        buttonContent.removeClass("d-none");
        loadingSpinner.addClass("d-none");
        followBtn.prop("disabled", false);
      }
    }

    followBtn.on("click", async function() {
      if (!localUser?.zuid) {
        localStorage.setItem("followCause", "{{this.zuid}}");
        window.location.href = "{{login_page.first().getUrl()}}?follow_cause={{this.zuid}}";
        return;
      }

      try {
        showLoading(true);
        const data = await window.getUserProfile(localUser.zuid);
        const zestyUser = data?.data[0];
        
        // Get favorite causes from relationship or create empty array
        let currentFavorites = [];
        let isFollowing = false;
        
        // Check if favorite_causes is a relationship object with data
        if (zestyUser.favorite_causes?.data && Array.isArray(zestyUser.favorite_causes.data)) {
          // Extract ZUIDs from the relationship data
          currentFavorites = zestyUser.favorite_causes.data.map(cause => cause.meta.zuid);
          isFollowing = currentFavorites.includes("{{this.zuid}}");
        } 
        // Fallback for legacy format (comma separated string)
        else if (typeof zestyUser.favorite_causes === 'string') {
          currentFavorites = zestyUser.favorite_causes.split(',').filter(zuid => zuid);
          isFollowing = currentFavorites.includes("{{this.zuid}}");
        }

        if (isFollowing) {
          // Unfollow - remove this cause from favorites
          const updatedFavorites = currentFavorites.filter(zuid => zuid !== "{{this.zuid}}");
          zestyUser.favorite_causes = updatedFavorites.join(',');
        } else {
          // Follow - add this cause to favorites
          currentFavorites.push("{{this.zuid}}");
          // Update user data with the modified favorites
          zestyUser.favorite_causes = currentFavorites.join(',');
        }
        
        // Use the original update function
        await window.updateZestyUser(localUser.zuid, {
          "favorite_causes": zestyUser.favorite_causes
        });
        
        updateButtonState(!isFollowing);
        
      } catch (error) {
        console.error("Error updating follow status:", error);
        // toastr.error("Failed to update follow status. Please try again.");
      } finally {
        showLoading(false);
      }
    });

    // Initial state check for logged-in users
    if (localUser?.zuid) {
      (async () => {
        try {
          const data = await window.getUserProfile(localUser.zuid);
          const zestyUser = data?.data[0];
          
          let isFollowing = false;
          
          // Check if favorite_causes is a relationship object
          if (zestyUser.favorite_causes?.data && Array.isArray(zestyUser.favorite_causes.data)) {
            const favoriteZuids = zestyUser.favorite_causes.data.map(cause => cause.meta.zuid);
            isFollowing = favoriteZuids.includes("{{this.zuid}}");
          } 
          // Fallback for legacy format
          else if (typeof zestyUser.favorite_causes === 'string') {
            const favoriteZuids = zestyUser.favorite_causes.split(',').filter(zuid => zuid);
            isFollowing = favoriteZuids.includes("{{this.zuid}}");
          }
          
          updateButtonState(isFollowing);
        } catch (error) {
          console.error("Error checking follow status:", error);
        }
      })();
    }
  });
</script>
